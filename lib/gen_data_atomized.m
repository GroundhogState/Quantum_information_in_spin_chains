function gen_data_atomized(config)

% TODO: Modify generation so each graph is saved?
%   goal: Make the code 'run' like an experiment so I can leave it idling 
%   Expected problem: Load times will increase with more samples
%   Solution: Create single files for each run...

% Method two: Each graph gets its own .mat file


% Returns
%   Struct with single field, samp, which is a cell array of structs with
%   fields:
%       L               Spin chain length
%       W               Disorder bandwidth
%       num_eigs        Number of selected eigenvalues
%       sel             Indices of selected eigen*
%       num_samples     Number of disorder realizations
%       nrg             List of selected RESCALED eigenvalues corresponding to
%       v_sel           List of selected eigenvalues which are turned into
%       A_list          State graph objects generated by vec_to_graph
%
fwtext('')
fwtext('GENERATING DATA')
if config.gen.freerun
    freerun_data_gen(config)
else
    gen_limited_data(config);
end
    

end

function data = freerun_data_gen(config)
    fwtext('FREERUN MODE')
    while true
        for i=1:numel(config.gen.Ws)
        % don't pass W=0, that's silly
    
            if config.gen.verbose
              fprintf('\n=Disorder strength %.1f  \n',config.gen.Ws(i))
            end

            data.L = config.gen.L;
            data.W = config.gen.Ws(i);
            data.num_eigs = config.gen.num_vecs;
            data.num_samples = config.gen.num_samples;
            data.sel = config.gen.sel;
            
            %% Build H
            config.gen.W = config.gen.Ws(i);
            if config.gen.verbose>2
                fprintf('-- Generating H... ')
            end
            [H, h_list] = disorder_H(config.gen); 
            if config.gen.verbose>2
                fprintf(' Diagonalizing... ')
            end
            [vecs, nrg] = eigs(full(H),length(H));
            if config.gen.verbose>2
                fprintf(' Done\n')
            end
            % The eigenvalues are returned in descending absolute value
            % So, we need to rescale so the spectrum is in [0,1]
            nrg = rescale(diag(nrg));
            % And then reorder such that we actually sample from a
            % particular piece of the spectrum
            [~, nrg_order] = sort(nrg);

            % Loop over & save generated eigenvectors
            for eig_idx = 1:length(config.gen.sel)
                    if config.gen.verbose > 2
                        fprintf(' - Producing graph for vector %d/%d',eig_idx, length(config.gen.sel))
                    end
               sel_tmp = nrg_order(config.gen.sel(eig_idx));
               data = [];
               data.L = config.gen.L;
               data.W = config.gen.W;
               data.h_list = h_list;
               data.nrg = nrg(sel_tmp);
               data.vec = vecs(:,sel_tmp);
               data.A = v2g_rec_atomized(data.vec);

                if config.gen.save
                    savedir = fullfile(config.gen.savepath,sprintf('W=%.3f',data.W));
                    if ~exist(savedir,'dir')
                        mkdir(savedir)
                    end
                    fprintf(' - Saving output\n')
                    timestamp = 1e3*posixtime(datetime);
                    fname=fullfile(savedir,sprintf('ent_loc_%.f.mat',timestamp));
                    save(fname,'-struct','data','-v7.3');
                end
            end
            fprintf('\n')

       end
    end
end

function data = gen_limited_data(config)
    for i=1:numel(config.gen.Ws)

        if config.gen.Ws(i) == 0
            n_samp = 1;
        else
            n_samp = config.gen.num_samples;
        end
        if config.gen.verbose
          fprintf('\n=Disorder strength %.1f  \n',config.gen.Ws(i))
        end

            data.L = config.gen.L;
            data.W = config.gen.Ws(i);
            data.num_eigs = config.gen.num_vecs;
            data.num_samples = config.gen.num_samples;
            data.sel = config.gen.sel;
            for k=1:n_samp
                if config.gen.verbose>1
                    fprintf('--Sample %u/%u\n',k,n_samp)
                end
            %% Build H
                config.gen.W = config.gen.Ws(i);
                if config.gen.verbose>2
                    fprintf('-- Generating H... ')
                end
                [H, h_list] = disorder_H(config.gen); 
                if config.gen.verbose>2
                    fprintf(' Diagonalizing... ')
                end
                [vecs, nrg] = eigs(full(H),length(H));
                if config.gen.verbose>2
                    fprintf(' Done\n')
                end
                % The eigenvalues are returned in descending absolute value
                % So, we need to rescale so the spectrum is in [0,1]
                nrg = rescale(diag(nrg));
                % And then reorder such that we actually sample from a
                % particular piece of the spectrum
                [~, nrg_order] = sort(nrg);

                % Loop over & save generated eigenvectors
                for eig_idx = 1:length(config.gen.sel)
                        if config.gen.verbose > 2
                            fprintf(' - Producing graph for vector %d/%d',eig_idx, length(config.gen.sel))
                        end
                   sel_tmp = nrg_order(config.gen.sel(eig_idx));
                   data = [];
                   data.L = config.gen.L;
                   data.W = config.gen.W;
                   data.h_list = h_list;
                   data.nrg = nrg(sel_tmp);
                   data.vec = vecs(:,sel_tmp);
                   data.A = v2g_rec_atomized(data.vec);

                    if config.gen.save
                        savedir = fullfile(config.gen.savepath,sprintf('W=%.3f',data.W));
                        if ~exist(savedir,'dir')
                            mkdir(savedir)
                        end
                        fprintf(' - Saving output\n')
                        timestamp = 1e3*posixtime(datetime);
                        fname=fullfile(savedir,sprintf('ent_loc_%.f.mat',timestamp));
                        save(fname,'-struct','data','-v7.3');
                    end
                end
            end

            fprintf('\n')

    end
end